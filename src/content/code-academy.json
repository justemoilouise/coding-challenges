[
  {
    "title": "Calculate the Mean and Mode",
    "description": "Given a list of numbers, return the list's mean and mode. If there are multiple modes, return the mode that occurs first.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-calculate-the-mean-and-mode-javascript",
    "tags": [ "Algorithmic Complexity", "Intermediate" ]
  },
  {
    "title": "Maximize stock trading profit",
    "description": "Given the daily values of a stock, create a function called <b>maxProfitDays()</b> that, given a list of integers, will return the index value of the two elements that represent the day on which one should have bought a share and the day on which one should have sold a share based on the max profit.<br /><br />A list of integers will represent the stock price at the beginning of each day for a week. You are required to buy and sell only once. You also must buy a stock before selling it.<br /><br />For example, given the list <b>[17, 11, 60, 25, 150, 75, 31, 120]</b>, you can assume that index 0 represents day 0 and index 7 represents day 7. In this case, purchasing on day 1 and selling on day 4 would yield the most profit.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-maximize-stock-trading-profit-javascript",
    "tags": [ "Algorithmic Complexity", "Intermediate" ]
  },
  {
    "title": "Prime Number Finder",
    "description": "Create a function that takes in a number, and returns all the prime numbers from <b>1</b> to <b>n</b> (inclusive). As a reminder, a prime number is a number that is only divisible by <b>1</b> and itself.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-maximize-stock-trading-profit-javascript",
    "tags": [ "Algorithmic Complexity", "Intermediate", "Arrays" ]
  },
  {
    "title": "Balanced Binary Search Tree",
    "description": "Given a sorted array of numbers, write a function to create a balanced binary search tree. A balanced BST has no more than one level of depth difference between the right and left sides of the tree.<br /><br />Each value in the array <b>a</b> should correspond to a node value. The return value will be the root node of the balanced tree. An empty array should return <b>null</b>.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-balanced-binary-search-tree-javascript",
    "tags": [ "Trees", "Intermediate" ]
  },
  {
    "title": "Semi-Prime Numbers",
    "description": "Create a function that takes in an integer, `n`, and returns the count of semi-prime numbers from 1 to `n`, non-inclusive. A semi-prime number is a number that is the product of two prime numbers. Note that the numbers don't have to be distinct, meaning that 4 is a semi-prime number since it is 2 * 2.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-semi-prime-numbers-javascript",
    "tags": [ "Algorithmic Complexity", "Advanced" ]
  },
  {
    "title": "Flatten an array",
    "description": "Write a function that takes in a 2-dimensional array, flattens it into a 1-dimensional array, and returns it. You can assume that you will only be given one or two-dimensional arrays.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-flatten-an-array-javascript",
    "tags": [ "Arrays", "Advanced" ]
  },
  {
    "title": "Sum of Prime Factors",
    "description": "Create a function that takes in an integer `n` and returns the sum of all of its prime factors. As a reminder, a prime number is a number whose only factors are one and itself. Therefore, a prime factor is a factor of a given number that itself is a prime number.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-sum-of-prime-factors-javascript",
    "tags": [ "Algorithmic Complexity", "Intermediate" ]
  },
  {
    "title": "Unique characters in a string",
    "description": "Write a function that determines if any given string has all unique characters (i.e. no character in the string is duplicated). If the string has all unique characters, the function should return `true`. If the string does not have all unique characters, return `false`.<br /><br />For example, `uniqueCharacters('apple')` should return `false`.<br/><br />Note that if the function is called with an empty string, it should return an error message.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-unique-characters-in-a-string-javascript",
    "tags": [ "Algorithmic Complexity", "Intermediate" ]
  },
  {
    "title": "FizzBuzz",
    "description": "Write a function that takes in a number, `n`, and returns an array of the numbers from 1 to `n`. For multiples of three, use <b>Fizz</b> instead of the number, and for the multiples of five, use <b>Buzz</b>. For numbers that are multiples of both three and five, use <b>FizzBuzz</b> (capitalization matters).",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-fizzbuzz-javascript",
    "tags": [ "Arrays", "Intermediate" ]
  },
  {
    "title": "Find the missing numbers",
    "description": "You have a bag containing tiles with numbers <b>[1, 2, 3, â€¦, n]</b> written on them. Each number appears exactly once, so there are <b>n</b> tiles and <b>n</b> numbers. Now, without looking, <b>k</b> number tiles are randomly picked out of the bag and discarded. Create a function that takes in a list and <b>k</b>, and returns the missing numbers in ascending order (from smallest to greatest).<br /><br />For example, <b>([1, 2, 4, 5, 6, 7, 8, 10], 2)</b> should return <b>[3, 9]</b>.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-find-the-missing-numbers-javascript",
    "tags": [ "Sets", "Intermediate" ]
  },
  {
    "title": "Find the Xth number",
    "description": "Write a function, `getX`, that given an int `x` and a integer array `num`, returns the Xth number if the list was in sorted order. In other words, the Xth smallest number.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-find-xth-number-in-order-javascript",
    "tags": [ "Sorting", "Intermediate" ]
  },
  {
    "title": "Reverse words",
    "description": "Write a function that will take a given string and reverse the order of the words. You may assume that the string is a sentence that contains only letters and spaces, with all words separated by one space.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-reverse-words-javascript",
    "tags": [ "Strings", "Advanced" ]
  },
  {
    "title": "Product of everything else",
    "description": "Create a function that takes in an array of integers and replaces each number in the array with the product of all the numbers in the array except the number at that index itself.<br /><br />For example, `fn([1, 2, 3, 4, 5])` should return `[120, 60, 40, 30, 24]` and `fn([5, 5, 5])` should return `[25, 25, 25]`.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-product-of-everything-else-javascript",
    "tags": [ "Algorithmic Complexity", "Advanced" ]
  },
  {
    "title": "Max product finder",
    "description": "Create a function that takes in a list of numbers and an integer `k`, and returns the largest product that can be attained from any `k` integers in the list. You may presume that the length of the list of integers is greater than or equal to `k`.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-max-product-finder-javascript",
    "tags": [ "Heaps", "Advanced" ]
  },
  {
    "title": "Stairmaster",
    "description": "Write a function that will compute the number of ways to climb a flight of `n` steps, taking `1`, `2`, or `3` steps at a time. Make sure to find all permutations, not combinations, as the order matters. Climbing one step then two steps is different from climbing two steps then one step.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-stairmaster-javascript",
    "tags": [ "Algorithmic Complexity", "Intermediate" ]
  },
  {
    "title": "Fibonacci finder",
    "description": "Create a function that finds the nth number in the Fibonacci sequence. As a reminder, the Fibonacci sequence is a mathematical sequence that begins with 0 and 1, with each following term being the sum of the two previous terms.",
    "link": "https://www.codecademy.com/code-challenges/code-challenge-fibonacci-finder-javascript",
    "tags": [ "Dynamic programming", "Intermediate" ]
  }
]
